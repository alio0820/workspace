Java语言的函数可以轻易的返回一个数组，而C/C++却不能直接返回一个数组。这是由于在C/C++中，数组不是一种类型，因此不能被直接返回。但你可以返回一个值向数组的指针。
C/C++的机制，一个数组作为参数传入的话，会自动降为指针
在C/C++中，一般有两种方法来返回一个数组。

第一种方法：
 返回一个指向数组的指针，例如char (*retArray)[10]声明了一个函数retArray，该函数可以返回指向具有10个char元素的数组
 例子如下：


#include <stdio.h>
#include <stdlib.h>

int (*retArray())[10]
{
    int (*a)[10];
    int i=0;
    /*动态开辟空间*/
    a=calloc(10,sizeof(int));
    /*赋值*/
    for(i=0;i<10;i++)
    {
        (*a)[i]=i;
    }
    return a;

}

int main()
{
    int (*b)[10];
    /*函数返回指向数组的指针*/
    b=retArray();
    /*打印第一个元素*/
    printf("%d/n",(*b)[0]);
    /*释放空间*/
    free(b);
    return 0;
}

第二种方法：
 如果你不喜欢用指针的形式返回数组，那么可以采用返回一个结构的形式。这种形式相对较安全，可以避免忘记释放指针而造成内存泄露，
也可以避免访问悬挂指针造成的错误。但缺点是由于结构是先拷贝再返回，因此如果结构较大时，会影响效率和占用较大内存。
 例子如下：

#include <stdio.h>

struct tag
{
    int a[10];
}x,y;

struct tag retArray()
{
    int i=0;
    for(i=0;i<10;i++)
        x.a[i]=i;
    return x;
}

int main()
{
    struct tag y=retArray();
    printf("%d/n",y.a[3]);
    return 0;
}
(1) 在返回指针时要切记要避免内存泄露和访问悬挂指针
(2) 很多人认为指针和数组等价的，这是错误的。int (*a)[10]和int b[10]两者是不能直接用a=b来赋值的。在数组和指针作为函数参数传递时，二者可以认为等价，这是因为数组会被转化为指针来传递。
(3) 返回多维数组方法类似。