Action是之前所述package包含的Action映射申明。<action>里的name属性是在JSP页面上定义的Action名字。在Struts2里系统主动寻找名字为它的Action，一旦找到就根据class属性里定义的Action类路径去执行该Action类。在代码里可以看到Action名字为Login.action，系统搜索到它之后根据映射定义的class执行LoginAction类。result相当于在Struts1里的forward属性。因为Action对象都是配置对象，这些配置对象都有唯一的标识，其中name就是标识。通过检索这些标识，Action对象封装了需要指向的URL，系统就会将最后响应信息转到URL所指的JSP页面。也就是代码里在<result>和</result>里定义的JSP页面路径。 
注意：Action的name一定要写成代码里显示的形式，没必要后面加“.do”或者“.action”这样的后缀名形式。因为“.do”是Struts1里定义的Action后缀名形式(当然在web.xml里也可以使用<url-pattern>*.do</url-pattern>来定义或定义成其他后缀名形式)，在Struts2里已经废弃不用了。而“.action”不加是因为当系统运行时候其实它会自动搜寻后缀名为“.action”的Action，所以也没必要加。否则就变成搜寻“xx.action.action”这样格式的Action，系统肯定会报错。 
另外说一句，虽然Struts2里系统只会搜寻“.action”的Action，但也可以让它只搜寻其他名字的后缀名。在Struts2的org/apache/struts2目录下有个default.properties属性文件，其中有个属性名为struts.action.extension，可以将它改为“struts.action.extension=do”，这样就只搜寻“.do”后缀名。如果不想修改Struts2的源文件，也可以用struts.properties，在该文件里加上“struts.action.extension=do”。而且还可以改为“struts.action.extension=do，htm”，这样就不只搜寻“.do”,还可以搜寻“.htm”后缀名。当中以“，”隔开就行。 
代码里还示范了另外一种Action写法，这种Action是不经过具体Action类进行业务逻辑处理，而是类似一个简单的Html链接功能。如代码所示，系统找到index.Action，根据<result>里定义的URL，在浏览器里直接显示login.jsp。 
注意：<result>和</result>之间定义的JSP页面要把全路径写出来，不能只写login.jsp、success.jsp。除非该JSP页面是在系统根目录下。 
（5）<global-results>是全局导航页面映射定义，这些定义的<result>是被多个Action共用的。如果一个具体Action在<action>里找不到定义的<result>唯一标识，它就去寻找（也可称之为匹配）<global-results>里的<result>唯一标识。如代码所示如果LoginAction返回的唯一标识不是“input”和“success”而是“global”，那它就在浏览器显示的是名字为“global”的<result>指向的JSP，这里只是为了示范，所以还是指向login.jsp。可以新建一个error.jsp，让<global-results>中这个名字为“global”的<result>指向它。则页面显示的就是error.jsp的内容。 
